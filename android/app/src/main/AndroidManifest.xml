<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <!-- Permisos básicos -->
    <!-- Permiso para acceder a Internet -->    
    <uses-permission android:name="android.permission.INTERNET" />
    
    <!-- Permisos para Bluetooth (obligatorios) -->
    <uses-permission android:name="android.permission.BLUETOOTH" />
    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
    
    <!-- Permisos para Android 12+ (API 31+) -->
    <uses-permission android:name="android.permission.BLUETOOTH_SCAN" 
        android:usesPermissionFlags="neverForLocation" /> <!-- Si no usas ubicación -->
    <uses-permission android:name="android.permission.BLUETOOTH_CONNECT" />

    <!-- Permisos de ubicación (requeridos para Android 11 y anteriores) -->
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"
        android:maxSdkVersion="30" /> <!-- Solo para dispositivos antiguos -->
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"
        android:maxSdkVersion="30" />

    <!-- Opcional: Si necesitas escanear en segundo plano -->
    <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION"
        android:maxSdkVersion="30" />

    <!-- Para Android 13+ (API 33+) -->
    <uses-permission android:name="android.permission.NEARBY_WIFI_DEVICES" 
        android:usesPermissionFlags="neverForLocation" />

    <!-- Declara características de hardware -->
    <uses-feature android:name="android.hardware.bluetooth" android:required="false" />
    <uses-feature android:name="android.hardware.bluetooth_le" android:required="false" />

    <!-- *************************************************************** -->
    <!-- PERMISOS ADICIONALES PARA ALMACENAMIENTO Y SUBIDA DE IMÁGENES -->
    <!-- *************************************************************** -->

    <!-- Permiso para acceder a la galería de imágenes en Android 13 (API 33) y superiores. -->
    <!-- Este es el permiso de medios granular y específico para imágenes. -->
    <uses-permission android:name="android.permission.READ_MEDIA_IMAGES"/>

    <!-- Permiso para acceder al almacenamiento externo (galería, etc.) en Android 12 (API 31) y anteriores. -->
    <!-- Este permiso es más amplio que READ_MEDIA_IMAGES. -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>

    <!-- Permiso para escribir en el almacenamiento externo en Android 9 (API 28) y anteriores. -->
    <!-- A partir de Android 10 (API 29), el "Scoped Storage" cambió cómo las apps acceden al almacenamiento, -->
    <!-- haciendo que WRITE_EXTERNAL_STORAGE ya no sea necesario para la mayoría de los casos de uso -->
    <!-- de archivos multimedia si se usa MediaStore o directorios privados. -->
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" android:maxSdkVersion="29"/>

    <!-- Permiso para acceder a la cámara del dispositivo. -->
    <!-- Necesario si la aplicación permite tomar fotos directamente además de seleccionar desde la galería. -->
    <uses-permission android:name="android.permission.CAMERA"/>

    <!-- Si tu aplicación necesita la capacidad de escribir archivos directamente en el almacenamiento externo compartido
          y no utiliza el MediaStore para hacerlo (lo cual es raro y no recomendado a partir de Android 10),
          y si tu targetSdkVersion es 29 o 30, podrías considerar agregar:
          android:requestLegacyExternalStorage="true"
          dentro de la etiqueta <application>. SIN EMBARGO, esto es una solución temporal y no es la forma recomendada.
          Con image_picker, usualmente no es necesario ya que maneja los archivos temporales de forma segura.
    -->
    
    <application
        android:label="tanari app"
        android:name="${applicationName}"
        android:icon="@mipmap/ic_launcher">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:taskAffinity=""
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- Specifies an Android theme to apply to this Activity as soon as
                  the Android process has started. This theme is visible to the user
                  while the Flutter UI initializes. After that, this theme continues
                  to determine the Window background behind the Flutter UI. -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
            

            <!-- INICIO DEL NUEVO INTENT-FILTER PARA DEEP LINKS DE SUPABASE -->
            <intent-filter>
                <action android:name="android.intent.action.VIEW"/>
                <category android:name="android.intent.category.DEFAULT"/>
                <category android:name="android.intent.category.BROWSABLE"/>
                <!-- Define el esquema (scheme) y el host que configuraste en Supabase -->
                <data android:scheme="tanariapp" android:host="reset-password"/>
            </intent-filter>
            <!-- FIN DEL NUEVO INTENT-FILTER -->

        </activity>
        <!-- Don't delete the meta-data below.
              This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />
    </application>
    <!-- Required to query activities that can process text, see:
          https://developer.android.com/training/package-visibility and
          https://developer.android.com/reference/android/content/Intent#ACTION_PROCESS_TEXT.

          In particular, this is used by the Flutter engine in io.flutter.plugin.text.ProcessTextPlugin. -->
    <queries>
        <intent>
            <action android:name="android.intent.action.PROCESS_TEXT"/>
            <data android:mimeType="text/plain"/>
        </intent>
    </queries>
</manifest>
